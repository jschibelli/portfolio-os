name: Issue Implementation Automation

# This workflow automates issue implementation when triggered manually or by labels
# It runs comprehensive analysis, implementation planning, and completion workflows

on:
  # Manual trigger with issue number input
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to implement'
        required: true
        type: string
      
  # Trigger when issue is labeled as ready for implementation
  issues:
    types: [labeled]

  # Trigger when issue is assigned
  issues:
    types: [assigned]

jobs:
  implement-issue:
    runs-on: ubuntu-latest
    
    # Determine issue number based on trigger
    steps:
      - name: Determine Issue Number
        id: issue-number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
    
    # Only run if issue is labeled as ready or manually triggered
    if: |
      github.event_name == 'workflow_dispatch' || 
      contains(github.event.label.name, 'ready-to-implement') ||
      contains(github.event.label.name, 'priority: high')
    
    # Add environment variables for better security and configuration
    env:
      NODE_VERSION: '18'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_NUMBER: ${{ steps.issue-number.outputs.number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Setup GitHub CLI
        run: |
          # Secure token handling with proper validation
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: GITHUB_TOKEN is not set"
            exit 1
          fi
          gh auth login --with-token <<< "$GITHUB_TOKEN"
          
      - name: Validate Issue Number
        run: |
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: Issue number is not available"
            exit 1
          fi
          echo "Implementing Issue #$ISSUE_NUMBER"
          
      - name: Run Issue Analysis
        run: |
          # Validate issue number and run analysis
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: Issue number is not available"
            exit 1
          fi
          chmod +x scripts/issue-analyzer.ps1
          pwsh scripts/issue-analyzer.ps1 -IssueNumber $ISSUE_NUMBER -GeneratePlan -ExportTo "issue-$ISSUE_NUMBER-analysis.json"
        continue-on-error: true
          
      - name: Comment Analysis Results
        run: |
          # Post analysis results to issue
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: Issue number is not available"
            exit 1
          fi
          
          ANALYSIS_COMMENT="## 🤖 Issue Implementation Analysis Complete
          
          I've analyzed Issue #$ISSUE_NUMBER and generated an implementation plan.
          
          ### Analysis Results:
          - **Implementation Plan**: Generated comprehensive plan with requirements analysis
          - **Priority Assessment**: Automatically determined based on labels and content
          - **Technical Requirements**: Extracted from issue description
          - **Acceptance Criteria**: Parsed and organized for implementation
          
          ### Next Steps:
          1. Review the generated implementation plan
          2. Use the automation scripts for guided implementation
          3. Run quality checks and testing
          4. Commit changes and update issue status
          
          ### Generated Files:
          - \`issue-$ISSUE_NUMBER-implementation-plan.md\` - Detailed implementation plan
          - \`issue-$ISSUE_NUMBER-analysis.json\` - Analysis data export
          
          **Status**: ✅ Analysis Complete - Ready for Implementation
          
          To proceed with implementation, run:
          \`\`\`powershell
          .\scripts\issue-implementation.ps1 -IssueNumber $ISSUE_NUMBER -Action all
          \`\`\`"
          
          gh issue comment $ISSUE_NUMBER --body "$ANALYSIS_COMMENT"
        continue-on-error: true
          
      - name: Upload generated files
        uses: actions/upload-artifact@v4
        with:
          name: issue-${{ env.ISSUE_NUMBER }}-analysis-files
          path: |
            issue-${{ env.ISSUE_NUMBER }}-implementation-plan.md
            issue-${{ env.ISSUE_NUMBER }}-analysis.json
          retention-days: 30
            
      - name: Generate Implementation Summary
        run: |
          # Generate comprehensive implementation summary
          echo "## 🤖 Issue Implementation Analysis for Issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks:" >> $GITHUB_STEP_SUMMARY
          echo "- Issue requirements analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Implementation plan generation" >> $GITHUB_STEP_SUMMARY
          echo "- Priority and complexity assessment" >> $GITHUB_STEP_SUMMARY
          echo "- Technical requirements extraction" >> $GITHUB_STEP_SUMMARY
          echo "- Acceptance criteria parsing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Generated Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Implementation plan (Markdown)" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis data (JSON export)" >> $GITHUB_STEP_SUMMARY
          echo "- Issue comment with next steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the implementation plan" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the implementation automation locally" >> $GITHUB_STEP_SUMMARY
          echo "3. Follow the generated plan for implementation" >> $GITHUB_STEP_SUMMARY
          echo "4. Use automation scripts for testing and deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: Check the artifacts section for detailed implementation plan and analysis results." >> $GITHUB_STEP_SUMMARY

  # Optional: Full implementation job (commented out by default)
  # Uncomment and modify this job if you want automated implementation
  # full-implementation:
  #   runs-on: ubuntu-latest
  #   needs: implement-issue
  #   if: github.event_name == 'workflow_dispatch'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
  #         
  #     - name: Install dependencies
  #       run: npm install
  #       
  #     - name: Setup GitHub CLI
  #       run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
  #       
  #     - name: Run Full Implementation
  #       run: |
  #         chmod +x scripts/issue-implementation.ps1
  #         pwsh scripts/issue-implementation.ps1 -IssueNumber ${{ github.event.inputs.issue_number }} -Action all
