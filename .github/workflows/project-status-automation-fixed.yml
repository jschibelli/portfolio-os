name: Project Status Automation

# This workflow automatically updates project board status based on issue/PR state changes
# Ensures PRs move to Backlog when created and linked to issues, and proper status transitions

on:
  pull_request:
    types: [opened, ready_for_review, closed, merged]
  issues:
    types: [opened, closed, labeled, assigned]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  projects: write

concurrency:
  group: project-status-${{ github.event.pull_request.number || github.event.issue.number || github.sha }}
  cancel-in-progress: true

env:
  PROJECT_URL: ${{ secrets.PORTFOLIO_PROJECT_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-pr-status:
    name: Update PR Status in Project
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Update PR Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const action = context.payload.action;
            
            console.log(`Processing PR #${pr.number} with action: ${action}`);
            
            // Get project ID from URL
            const projectUrl = process.env.PROJECT_URL;
            if (!projectUrl) {
              console.log('No PROJECT_URL found, skipping project update');
              return;
            }
            
            console.log(`Project URL: ${projectUrl}`);
            
            // Extract project number from URL
            const projectNumber = projectUrl.split('/').pop();
            console.log(`Project number: ${projectNumber}`);
            
            const owner = 'jschibelli';
            const repo = 'portfolio-os';
            
            try {
              // Get project details - using user instead of organization
              const projectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              console.log(`Querying project for owner: ${owner}, number: ${projectNumber}`);
              
              const projectResult = await github.graphql(projectQuery, {
                owner: owner,
                number: parseInt(projectNumber)
              });
              
              console.log('Project query result:', JSON.stringify(projectResult, null, 2));
              
              const project = projectResult.user.projectV2;
              if (!project) {
                console.log('Project not found');
                return;
              }
              
              const statusField = project.fields.nodes.find(field => field.name === 'Status');
              
              if (!statusField) {
                console.log('Status field not found in project');
                console.log('Available fields:', project.fields.nodes.map(f => f.name));
                return;
              }
              
              console.log(`Found status field: ${statusField.name} (${statusField.id})`);
              console.log('Available status options:', statusField.options.map(opt => `${opt.name} (${opt.id})`));
              
              // Get project item for this PR
              const itemQuery = `
                query($owner: String!, $repo: String!, $prNumber: Int!, $projectId: ID!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequest(number: $prNumber) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const itemResult = await github.graphql(itemQuery, {
                owner: owner,
                repo: repo,
                prNumber: pr.number,
                projectId: project.id
              });
              
              console.log('Item query result:', JSON.stringify(itemResult, null, 2));
              
              const projectItem = itemResult.repository.pullRequest.projectItems.nodes.find(
                item => item.project.id === project.id
              );
              
              if (!projectItem) {
                console.log(`PR #${pr.number} not found in project`);
                return;
              }
              
              console.log(`Found project item: ${projectItem.id}`);
              
              // Determine new status based on PR action
              let newStatusId;
              switch (action) {
                case 'opened':
                case 'ready_for_review':
                  // PR should be in Backlog when opened
                  newStatusId = statusField.options.find(opt => opt.name === 'Backlog')?.id;
                  break;
                case 'closed':
                  if (pr.merged) {
                    // Merged PRs go to Done
                    newStatusId = statusField.options.find(opt => opt.name === 'Done')?.id;
                  } else {
                    // Closed but not merged - keep in current status or move to Backlog
                    newStatusId = statusField.options.find(opt => opt.name === 'Backlog')?.id;
                  }
                  break;
                default:
                  console.log(`No status change needed for action: ${action}`);
                  return;
              }
              
              if (newStatusId) {
                const statusName = statusField.options.find(opt => opt.id === newStatusId)?.name;
                console.log(`Updating status to: ${statusName} (${newStatusId})`);
                
                // Update the project item status
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: {
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                
                const updateResult = await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  optionId: newStatusId
                });
                
                console.log('Update result:', JSON.stringify(updateResult, null, 2));
                console.log(`âœ… Updated PR #${pr.number} status to ${statusName}`);
              } else {
                console.log('No valid status option found');
              }
              
            } catch (error) {
              console.error('Error updating project status:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
            }

  update-issue-status:
    name: Update Issue Status in Project
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Issue Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const action = context.payload.action;
            
            console.log(`Processing Issue #${issue.number} with action: ${action}`);
            
            // Get project ID from URL
            const projectUrl = process.env.PROJECT_URL;
            if (!projectUrl) {
              console.log('No PROJECT_URL found, skipping project update');
              return;
            }
            
            console.log(`Project URL: ${projectUrl}`);
            
            // Extract project number from URL
            const projectNumber = projectUrl.split('/').pop();
            console.log(`Project number: ${projectNumber}`);
            
            const owner = 'jschibelli';
            const repo = 'portfolio-os';
            
            try {
              // Get project details - using user instead of organization
              const projectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              console.log(`Querying project for owner: ${owner}, number: ${projectNumber}`);
              
              const projectResult = await github.graphql(projectQuery, {
                owner: owner,
                number: parseInt(projectNumber)
              });
              
              console.log('Project query result:', JSON.stringify(projectResult, null, 2));
              
              const project = projectResult.user.projectV2;
              if (!project) {
                console.log('Project not found');
                return;
              }
              
              const statusField = project.fields.nodes.find(field => field.name === 'Status');
              
              if (!statusField) {
                console.log('Status field not found in project');
                console.log('Available fields:', project.fields.nodes.map(f => f.name));
                return;
              }
              
              console.log(`Found status field: ${statusField.name} (${statusField.id})`);
              console.log('Available status options:', statusField.options.map(opt => `${opt.name} (${opt.id})`));
              
              // Get project item for this issue
              const itemQuery = `
                query($owner: String!, $repo: String!, $issueNumber: Int!, $projectId: ID!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const itemResult = await github.graphql(itemQuery, {
                owner: owner,
                repo: repo,
                issueNumber: issue.number,
                projectId: project.id
              });
              
              console.log('Item query result:', JSON.stringify(itemResult, null, 2));
              
              const projectItem = itemResult.repository.issue.projectItems.nodes.find(
                item => item.project.id === project.id
              );
              
              if (!projectItem) {
                console.log(`Issue #${issue.number} not found in project`);
                return;
              }
              
              console.log(`Found project item: ${projectItem.id}`);
              
              // Determine new status based on issue action
              let newStatusId;
              switch (action) {
                case 'opened':
                  // New issues start in Backlog
                  newStatusId = statusField.options.find(opt => opt.name === 'Backlog')?.id;
                  break;
                case 'closed':
                  // Closed issues go to Done
                  newStatusId = statusField.options.find(opt => opt.name === 'Done')?.id;
                  break;
                case 'labeled':
                  // Check if specific labels trigger status changes
                  const labels = context.payload.issue.labels.map(label => label.name);
                  console.log('Issue labels:', labels);
                  if (labels.includes('ready-to-implement')) {
                    newStatusId = statusField.options.find(opt => opt.name === 'Planned')?.id;
                  } else if (labels.includes('in-progress')) {
                    newStatusId = statusField.options.find(opt => opt.name === 'In Progress')?.id;
                  }
                  break;
                case 'assigned':
                  // When assigned, move to In Progress
                  newStatusId = statusField.options.find(opt => opt.name === 'In Progress')?.id;
                  break;
                default:
                  console.log(`No status change needed for action: ${action}`);
                  return;
              }
              
              if (newStatusId) {
                const statusName = statusField.options.find(opt => opt.id === newStatusId)?.name;
                console.log(`Updating status to: ${statusName} (${newStatusId})`);
                
                // Update the project item status
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: {
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                
                const updateResult = await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  optionId: newStatusId
                });
                
                console.log('Update result:', JSON.stringify(updateResult, null, 2));
                console.log(`âœ… Updated Issue #${issue.number} status to ${statusName}`);
              } else {
                console.log('No valid status option found');
              }
              
            } catch (error) {
              console.error('Error updating project status:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
            }
