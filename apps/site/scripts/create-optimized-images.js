const fs = require('fs');
const path = require('path');

/**
 * Image Optimization Script
 * 
 * This script provides instructions and creates placeholder files for optimizing hero images.
 * It includes error handling, modular functions, and comprehensive logging.
 */

// Configuration constants
const CONFIG = {
  heroDir: path.join(__dirname, '../public/assets/hero'),
  outputDir: path.join(__dirname, '../public/assets/hero/optimized'),
  largeImages: [
    'hero-bg-fb.png',
    'hero-bg-og.png', 
    'hero-bg.png',
    'hero-bg1.png',
    'hero-bg2.png',
    'hero-bg3.png',
    'hero-bg4.png'
  ],
  targetFileSize: 200, // KB
  targetQuality: '80-85%',
  maxWidth: 1920
};

/**
 * Safely create directory if it doesn't exist
 * @param {string} dirPath - Directory path to create
 * @returns {boolean} - Success status
 */
function createDirectory(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ Created directory: ${dirPath}`);
      return true;
    }
    return true;
  } catch (error) {
    console.error(`‚ùå Failed to create directory ${dirPath}:`, error.message);
    return false;
  }
}

/**
 * Get file size in MB with error handling
 * @param {string} filePath - Path to the file
 * @returns {string} - File size in MB or 'Unknown'
 */
function getFileSize(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      return (stats.size / (1024 * 1024)).toFixed(2);
    }
    return 'Unknown';
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Could not get size for ${filePath}:`, error.message);
    return 'Unknown';
  }
}

/**
 * Display image optimization instructions
 */
function displayOptimizationInstructions() {
  console.log('üöÄ Image Optimization Instructions\n');
  console.log('The following images need optimization:');
  
  CONFIG.largeImages.forEach(image => {
    const inputPath = path.join(CONFIG.heroDir, image);
    const sizeMB = getFileSize(inputPath);
    const status = fs.existsSync(inputPath) ? 'üì∏' : '‚ùå';
    console.log(`  ${status} ${image}: ${sizeMB}MB`);
  });

  console.log('\nüí° Optimization Steps:');
  console.log('1. Use an online tool like:');
  console.log('   - https://squoosh.app/ (Google\'s image optimizer)');
  console.log('   - https://tinypng.com/ (PNG compression)');
  console.log('   - https://convertio.co/png-webp/ (PNG to WebP converter)');
  console.log('2. Target file sizes:');
  console.log(`   - Hero backgrounds: < ${CONFIG.targetFileSize}KB each`);
  console.log('   - Use WebP format for better compression');
  console.log(`   - Maintain quality at ${CONFIG.targetQuality}`);
  console.log('3. Save optimized images to: public/assets/hero/optimized/');

  console.log('\nüìã Recommended settings:');
  console.log('- Format: WebP');
  console.log(`- Quality: ${CONFIG.targetQuality}`);
  console.log(`- Resize if needed: Max width ${CONFIG.maxWidth}px`);
  console.log('- Progressive: Yes');
}

/**
 * Create README file with optimization guidelines
 * @returns {boolean} - Success status
 */
function createReadmeFile() {
  try {
    const readmeContent = `# Optimized Images

This folder contains optimized versions of hero background images.

## Optimization Guidelines:
- Format: WebP preferred, PNG as fallback
- Quality: ${CONFIG.targetQuality}
- Max file size: ${CONFIG.targetFileSize}KB per image
- Max dimensions: ${CONFIG.maxWidth}px width

## Files to optimize:
${CONFIG.largeImages.map(img => `- ${img}`).join('\n')}

## Usage:
Update the hero component to use optimized images from this folder.

## Performance Impact:
- Reduced file sizes improve page load times
- WebP format provides better compression than PNG
- Optimized images reduce bandwidth usage
- Better Core Web Vitals scores (LCP, CLS)

## Generated by: create-optimized-images.js
## Last updated: ${new Date().toISOString()}
`;

    const readmePath = path.join(CONFIG.outputDir, 'README.md');
    fs.writeFileSync(readmePath, readmeContent);
    console.log(`\n‚úÖ Created optimization instructions in ${readmePath}`);
    return true;
  } catch (error) {
    console.error('‚ùå Failed to create README file:', error.message);
    return false;
  }
}

/**
 * Main execution function with error handling
 */
function main() {
  try {
    console.log('üîß Starting image optimization setup...\n');
    
    // Create output directory
    if (!createDirectory(CONFIG.outputDir)) {
      console.error('‚ùå Cannot proceed without output directory');
      process.exit(1);
    }
    
    // Display instructions
    displayOptimizationInstructions();
    
    // Create README file
    if (!createReadmeFile()) {
      console.warn('‚ö†Ô∏è  README file creation failed, but script completed');
    }
    
    console.log('\nüéâ Image optimization setup completed successfully!');
    console.log('üìù Next steps:');
    console.log('   1. Follow the optimization steps above');
    console.log('   2. Place optimized images in the output directory');
    console.log('   3. Update hero component to use optimized images');
    console.log('   4. Test performance improvements with Lighthouse');
    
  } catch (error) {
    console.error('‚ùå Script execution failed:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Execute main function if script is run directly
if (require.main === module) {
  main();
}

// Export functions for potential reuse
module.exports = {
  createDirectory,
  getFileSize,
  displayOptimizationInstructions,
  createReadmeFile,
  CONFIG
};
