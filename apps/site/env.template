# ============================================
# Hashnode Blog Configuration
# ============================================
# Required for blog content on the home page and /blog pages
# Get your publication host from your Hashnode dashboard
# Example: if your blog is at https://mindware.hashnode.dev, 
# then use: mindware.hashnode.dev

NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST=mindware.hashnode.dev

# ============================================
# Resend Email Service Configuration
# ============================================
# Get your API key from: https://resend.com/api-keys
# The free tier allows 3,000 emails/month (100 emails/day)
#
# ‚ö†Ô∏è SECURITY WARNING:
# - NEVER commit this file with real API keys to version control
# - Keep this file in .env.local (which is in .gitignore)
# - Rotate API keys if accidentally exposed
# - Use environment-specific keys (separate for dev/prod)

RESEND_API_KEY=your_resend_api_key_here

# ============================================
# Email Configuration
# ============================================
# EMAIL_FROM must be a verified domain in Resend
# For development, you can use resend's test domain: onboarding@resend.dev
# For production, use your own verified domain: noreply@yourdomain.com
#
# üîí Best Practices:
# - Verify your domain in Resend dashboard before production use
# - Use DKIM and SPF records for better deliverability
# - Monitor email delivery rates and bounce rates
# - Implement proper error handling for failed sends

EMAIL_FROM=noreply@schibelli.dev

# Optional: Email address for replies to contact form submissions
EMAIL_REPLY_TO=john@schibelli.dev

# ============================================
# Setup Instructions
# ============================================
# 1. Copy this file to .env.local in the apps/site directory
#    Command: cp apps/site/env.template apps/site/.env.local
# 
# 2. Sign up at https://resend.com (free tier available)
# 
# 3. Get your API key from https://resend.com/api-keys
# 
# 4. Replace 'your_resend_api_key_here' with your actual API key
# 
# 5. Update EMAIL_FROM and EMAIL_REPLY_TO with your email addresses
# 
# 6. For production, verify your domain in Resend dashboard
#
# ‚ö†Ô∏è IMPORTANT SECURITY NOTES:
# - The .env.local file is in .gitignore and should NEVER be committed
# - Never share your API keys in chat, email, or public repositories
# - Use different API keys for development and production
# - Implement key rotation policies (rotate every 90 days recommended)
# - If a key is exposed, immediately revoke it in Resend dashboard
# - Use Vercel Environment Variables for production deployments
# - Enable 2FA on your Resend account for additional security

# ============================================
# Testing Setup
# ============================================
# For local development/testing without sending real emails:
# - Set NODE_ENV=test
# - The email service will use mock implementations

# For testing with Resend's test domain:
# - RESEND_API_KEY=your_test_api_key
# - EMAIL_FROM=onboarding@resend.dev

# ============================================
# Production Deployment (Vercel)
# ============================================
# üöÄ Secure Production Deployment Steps:
#
# 1. Go to Vercel Dashboard > Your Project > Settings > Environment Variables
# 
# 2. Add the following variables:
#    - RESEND_API_KEY (production API key from Resend)
#    - EMAIL_FROM (your verified domain email)
#    - EMAIL_REPLY_TO (your reply-to email)
# 
# 3. Select the appropriate environment:
#    ‚òëÔ∏è Production (use production API key)
#    ‚òê Preview (optional: use test key)
#    ‚òê Development (use local .env.local file)
# 
# 4. Redeploy your application to apply changes
#
# üîí Production Security Best Practices:
# - Use separate API keys for production (never reuse dev keys)
# - Enable Vercel's environment variable encryption
# - Set up monitoring and alerts for email service failures
# - Implement rate limiting to prevent abuse
# - Regularly audit API key usage in Resend dashboard
# - Use Vercel's audit logs to track environment variable changes
# - Consider using a key management service (AWS KMS, HashiCorp Vault) for enterprise
#
# üìä Monitoring & Maintenance:
# - Set up Resend webhooks for delivery notifications
# - Monitor bounce rates and spam complaints
# - Implement logging for all email operations
# - Review email sending patterns regularly
# - Set up alerts for failed email deliveries

# ============================================
# Validation & Error Handling
# ============================================
# The application includes comprehensive environment validation:
#
# ‚úÖ Validation Features:
# - Warns if RESEND_API_KEY is missing (in non-test environments)
# - Validates email format for EMAIL_FROM and EMAIL_REPLY_TO
# - Provides helpful error messages with setup instructions
# - Returns proper HTTP error codes when services are not configured
# - Gracefully handles missing variables during build time
#
# üîç Troubleshooting:
# - If emails aren't sending, check the console for validation errors
# - Verify your API key is active in Resend dashboard
# - Ensure EMAIL_FROM uses a verified domain
# - Check email service logs at https://resend.com/emails
# - Test with Resend's test domain (onboarding@resend.dev) first
#
# üìö Additional Resources:
# - Resend Documentation: https://resend.com/docs
# - Resend API Reference: https://resend.com/docs/api-reference
# - Domain Verification Guide: https://resend.com/docs/dashboard/domains
# - Contact Form Setup: See apps/site/docs/CONTACT_FORM_SETUP.md

