name: 'Setup pnpm with caching and build verification'
description: 'Setup pnpm package manager with optimized caching, build verification, and cross-platform support'
inputs:
  node-version:
    description: 'Node.js version to use (recommended: 18 LTS)'
    required: true
    default: '18'
  pnpm-version:
    description: 'pnpm version to use (recommended: 8.x)'
    required: true
    default: '8'
  cache-path:
    description: 'pnpm cache path (cross-platform compatible)'
    required: false
    default: '~/.pnpm-store'
  verify-build:
    description: 'Whether to verify the project builds correctly after dependency installation'
    required: false
    default: 'true'
  working-directory:
    description: 'Working directory for the project (relative to repository root)'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    # Setup Node.js environment with specified version
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        
    # Install and configure pnpm package manager
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}
        
    # Configure pnpm cache for faster subsequent builds with enhanced monitoring
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.cache-path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          ${{ runner.os }}-pnpm-store-
          
    # Install project dependencies with frozen lockfile for reproducible builds
    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üì¶ Installing dependencies with pnpm..."
        pnpm install --frozen-lockfile
        
        # Display cache statistics for monitoring
        echo "üìä Cache statistics:"
        if [ -d "${{ inputs.cache-path }}" ]; then
          echo "Cache directory size: $(du -sh ${{ inputs.cache-path }} 2>/dev/null || echo 'N/A')"
          echo "Cache directory contents: $(ls -la ${{ inputs.cache-path }} 2>/dev/null | wc -l) items"
        else
          echo "Cache directory not found - this is expected on first run"
        fi
        
    # Verify project builds correctly after dependency installation
    - name: Verify project build
      if: inputs.verify-build == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üî® Verifying project builds correctly..."
        
        # Check if package.json has a build script
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          echo "‚úÖ Build script found in package.json"
          
          # Run build verification (dry run or quick build check)
          if command -v pnpm &> /dev/null; then
            echo "üöÄ Running build verification..."
            pnpm run build --dry-run 2>/dev/null || pnpm run build --help 2>/dev/null || {
              echo "‚ö†Ô∏è Dry run not supported, running quick build check..."
              # For Next.js projects, we can check if the build process starts correctly
              timeout 30s pnpm run build || {
                if [ $? -eq 124 ]; then
                  echo "‚úÖ Build process started successfully (timeout after 30s)"
                else
                  echo "‚ùå Build verification failed"
                  exit 1
                fi
              }
            }
          else
            echo "‚ùå pnpm not found in PATH"
            exit 1
          fi
        else
          echo "‚ÑπÔ∏è No build script found in package.json - skipping build verification"
        fi
        
        echo "‚úÖ Project build verification completed successfully"
