generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id         String   @id
  kind       String
  channel    String?
  externalId String?
  meta       Json?
  createdAt  DateTime @default(now())
}

model Article {
  id                 String           @id
  title              String
  subtitle           String?
  slug               String           @unique
  status             ArticleStatus    @default(DRAFT)
  visibility         Visibility       @default(PUBLIC)
  excerpt            String?
  authorId           String
  seriesId           String?
  contentJson        Json?
  contentMdx         String?
  coverId            String?
  ogImageUrl         String?
  canonicalUrl       String?
  canonicalSource    String?
  noindex            Boolean          @default(false)
  publishedAt        DateTime?
  scheduledAt        DateTime?
  featured           Boolean          @default(false)
  allowComments      Boolean          @default(true)
  paywalled          Boolean          @default(false)
  readingMinutes     Int?
  views              Int              @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  allowReactions     Boolean          @default(true)
  focusKeyword       String?
  hashnodeId         String?
  metaDescription    String?
  metaTitle          String?
  ogDescription      String?
  ogTitle            String?
  seoScore           Int?
  seriesPosition     Int?
  twitterCard        String?          @default("summary_large_image")
  twitterDescription String?
  twitterImage       String?
  twitterTitle       String?
  User               User             @relation(fields: [authorId], references: [id])
  ImageAsset         ImageAsset?      @relation(fields: [coverId], references: [id])
  Series             Series?          @relation(fields: [seriesId], references: [id])
  ArticleTag         ArticleTag[]
  ArticleVersion     ArticleVersion[]
  Comment            Comment[]
  Reaction           Reaction[]
}

model ArticleTag {
  articleId  String
  tagId      String
  assignedAt DateTime @default(now())
  Article    Article  @relation(fields: [articleId], references: [id])
  Tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
}

model ArticleVersion {
  id          String   @id
  articleId   String
  label       String?
  contentJson Json?
  contentMdx  String?
  note        String?
  createdAt   DateTime @default(now())
  Article     Article  @relation(fields: [articleId], references: [id])
}

model Booking {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  timezone        String
  startTime       DateTime
  endTime         DateTime
  meetingType     String?
  notes           String?
  status          String
  googleEventId   String?
  reminder24hSent Boolean  @default(false)
  reminder10mSent Boolean  @default(false)
  followupSent    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
}

model CaseStudy {
  id             String        @id
  title          String
  slug           String        @unique
  excerpt        String?
  content        String?
  status         ArticleStatus @default(DRAFT)
  visibility     Visibility    @default(PUBLIC)
  publishedAt    DateTime?
  featured       Boolean       @default(false)
  client         String?
  industry       String?
  duration       String?
  teamSize       String?
  technologies   String[]
  challenges     String?
  solution       String?
  results        String?
  metrics        Json?
  lessonsLearned String?
  nextSteps      String?
  coverImage     String?
  seoTitle       String?
  seoDescription String?
  canonicalUrl   String?
  ogImage        String?
  allowComments  Boolean       @default(true)
  allowReactions Boolean       @default(true)
  views          Int           @default(0)
  tags           String[]
  category       String?
  authorId       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  User           User?         @relation(fields: [authorId], references: [id])
}

model CaseStudyView {
  id          Int      @id @default(autoincrement())
  caseStudyId String
  chapterId   String
  visitorId   String?
  viewedAt    DateTime
}

model Comment {
  id            String    @id
  articleId     String
  author        String
  email         String
  content       String
  status        String    @default("pending")
  parentId      String?
  likes         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Article       Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  Comment       Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  other_Comment Comment[] @relation("CommentToComment")

  @@index([articleId])
  @@index([createdAt])
  @@index([status])
}

model ConnectedAccount {
  id              String    @id
  provider        String
  scopes          String
  accessTokenEnc  String
  refreshTokenEnc String?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  userId          String
}

model ImageAsset {
  id        String    @id
  url       String
  width     Int?
  height    Int?
  alt       String?
  blurData  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Article   Article[]
}

model Job {
  id          String   @id
  type        String
  payloadJson Json
  runAt       DateTime
  status      String
  attempts    Int      @default(0)
  lastError   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  company   String?
  role      String?
  project   String
  budget    String?
  timeline  String?
  links     String?
  notes     String?
  status    String
  createdAt DateTime @default(now())
}

model NewsletterCampaign {
  id             String         @id
  title          String
  subject        String
  content        String
  status         CampaignStatus @default(DRAFT)
  scheduledAt    DateTime?
  sentAt         DateTime?
  recipientCount Int            @default(0)
  openRate       Float          @default(0)
  clickRate      Float          @default(0)
  tags           String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
}

model NewsletterSubscriber {
  id            String           @id
  email         String           @unique
  name          String?
  status        NewsletterStatus @default(ACTIVE)
  tags          String[]
  source        String?          @default("website")
  engagement    String?          @default("medium")
  lastEmailSent DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime
}

model Note {
  id        String   @id
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model OutboundItem {
  id          String    @id
  userId      String
  type        String
  channel     String
  status      String
  externalId  String?
  scheduledAt DateTime?
  payloadJson Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
}

model Reaction {
  id        String       @id
  articleId String
  kind      ReactionKind
  count     Int          @default(0)
  updatedAt DateTime
  Article   Article      @relation(fields: [articleId], references: [id])
}

model Redirect {
  id        String   @id
  fromPath  String   @unique
  toPath    String
  createdAt DateTime @default(now())
}

model Series {
  id          String    @id
  title       String
  slug        String    @unique
  description String?
  coverUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Article     Article[]
}

model Tag {
  id         String       @id
  name       String       @unique
  slug       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  ArticleTag ArticleTag[]
}

model User {
  id        String      @id
  name      String?
  email     String      @unique
  password  String
  role      Role        @default(AUTHOR)
  image     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime
  Article   Article[]
  CaseStudy CaseStudy[]
}

enum ArticleStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
  PENDING
}

enum ReactionKind {
  LIKE
  CLAP
  HEART
  ROCKET
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
  MEMBERS_ONLY
}

// Analytics tracking models
model PageView {
  id        String   @id @default(cuid())
  url       String
  title     String
  referrer  String?
  userAgent String?
  timestamp DateTime @default(now())
  sessionId String?
  userId    String?
  
  @@index([timestamp])
  @@index([sessionId])
  @@index([userId])
}

model UserInteraction {
  id        String   @id @default(cuid())
  type      String   // click, scroll, time_on_page, form_submit, download
  element   String?
  value     Json?
  timestamp DateTime @default(now())
  sessionId String?
  userId    String?
  pageUrl   String
  
  @@index([timestamp])
  @@index([sessionId])
  @@index([userId])
}

model AnalyticsSession {
  id        String    @id @default(cuid())
  sessionId String    @unique
  userId    String?
  startTime DateTime  @default(now())
  endTime   DateTime?
  pageViews Int       @default(0)
  duration  Int?      // in seconds
  referrer  String?
  userAgent String?
  ipAddress String?
  
  @@index([startTime])
  @@index([userId])
}
