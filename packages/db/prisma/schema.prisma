// Prisma schema for chatbot data and blog system
// Uses PostgreSQL for production. You can switch to SQLite in development.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArticleStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
  MEMBERS
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum ReactionKind {
  LIKE
  CLAP
  HEART
  ROCKET
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
  PENDING
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(AUTHOR)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articles  Article[] @relation("AuthorArticles")
  caseStudies CaseStudy[] @relation("AuthorCaseStudies")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articles  ArticleTag[]
}

model Series {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  coverUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  articles    Article[]
}

model ImageAsset {
  id        String   @id @default(cuid())
  url       String
  width     Int?
  height    Int?
  alt       String?
  blurData  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usedBy    Article[] @relation("CoverImage")
}

model Article {
  id              String        @id @default(cuid())
  title           String
  subtitle        String?
  slug            String        @unique
  status          ArticleStatus @default(DRAFT)
  visibility      Visibility    @default(PUBLIC)
  excerpt         String?
  authorId        String
  author          User          @relation("AuthorArticles", fields: [authorId], references: [id])
  seriesId        String?
  series          Series?       @relation(fields: [seriesId], references: [id])
  contentJson     Json?
  contentMdx      String?
  coverId         String?
  cover           ImageAsset?   @relation("CoverImage", fields: [coverId], references: [id])
  ogImageUrl      String?
  canonicalUrl    String?
  canonicalSource String?
  noindex         Boolean       @default(false)
  publishedAt     DateTime?
  scheduledAt     DateTime?
  featured        Boolean       @default(false)
  allowComments   Boolean       @default(true)
  paywalled       Boolean       @default(false)
  readingMinutes  Int?
  views           Int           @default(0)
  tags            ArticleTag[]
  versions        ArticleVersion[]
  reactions       Reaction[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model CaseStudy {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  excerpt         String?
  content         String?
  status          ArticleStatus @default(DRAFT)
  visibility      Visibility    @default(PUBLIC)
  publishedAt     DateTime?
  featured        Boolean       @default(false)
  
  // Project details
  client          String?
  industry        String?
  duration        String?
  teamSize        String?
  technologies    String[]
  challenges      String?
  solution        String?
  results         String?
  metrics         Json?
  lessonsLearned  String?
  nextSteps       String?
  
  // Media and SEO
  coverImage      String?
  seoTitle        String?
  seoDescription  String?
  canonicalUrl    String?
  ogImage         String?
  
  // Engagement
  allowComments   Boolean       @default(true)
  allowReactions  Boolean       @default(true)
  views           Int           @default(0)
  
  // Tags and categories
  tags            String[]
  category        String?
  
  // Author and metadata
  authorId        String?
  author          User?         @relation("AuthorCaseStudies", fields: [authorId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ArticleTag {
  articleId  String
  tagId      String
  assignedAt DateTime @default(now())
  article    Article @relation(fields: [articleId], references: [id])
  tag        Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
}

model ArticleVersion {
  id          String   @id @default(cuid())
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id])
  label       String?
  contentJson Json?
  contentMdx  String?
  note        String?
  createdAt   DateTime @default(now())
}

model Reaction {
  id        String       @id @default(cuid())
  articleId String
  kind      ReactionKind
  count     Int          @default(0)
  updatedAt DateTime     @updatedAt
  article   Article      @relation(fields: [articleId], references: [id])
}

model Redirect {
  id        String   @id @default(cuid())
  fromPath  String   @unique
  toPath    String
  createdAt DateTime @default(now())
}

// Existing models
model Booking {
  id              Int       @id @default(autoincrement())
  name            String
  email           String
  timezone        String
  startTime       DateTime
  endTime         DateTime
  meetingType     String?
  notes           String?
  status          String
  googleEventId   String?
  reminder24hSent Boolean   @default(false)
  reminder10mSent Boolean   @default(false)
  followupSent    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Lead {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  company   String?
  role      String?
  project   String
  budget    String?
  timeline  String?
  links     String?
  notes     String?
  status    String
  createdAt DateTime  @default(now())
}

model CaseStudyView {
  id          Int       @id @default(autoincrement())
  caseStudyId String
  chapterId   String
  visitorId   String?
  viewedAt    DateTime
}

model ConnectedAccount {
  id           String @id @default(cuid())
  provider     String
  scopes       String
  accessTokenEnc   String
  refreshTokenEnc  String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
}

model OutboundItem {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'email' | 'social' | 'calendar'
  channel     String   // 'gmail' | 'linkedin' | 'facebook' | 'threads'
  status      String   // 'SCHEDULED' | 'SENT' | 'FAILED'
  externalId  String?
  scheduledAt DateTime?
  payloadJson Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   // markdown
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id          String   @id @default(cuid())
  type        String   // 'email' | 'social'
  payloadJson Json
  runAt       DateTime
  status      String   // 'QUEUED' | 'RUNNING' | 'SUCCESS' | 'FAILED'
  attempts    Int      @default(0)
  lastError   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  kind        String   // 'EMAIL_SENT' | 'POST_PUBLISHED' | 'EVENT_CREATED' | 'DEPLOY_COMPLETE' | etc.
  channel     String?  // 'gmail' | 'linkedin' | 'facebook' | 'threads' | 'calendar' | ...
  externalId  String?
  meta        Json?
  createdAt   DateTime @default(now())
}

model NewsletterSubscriber {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  status        NewsletterStatus @default(ACTIVE)
  tags          String[]
  source        String?         @default("website")
  engagement    String?         @default("medium") // 'high' | 'medium' | 'low'
  lastEmailSent DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model NewsletterCampaign {
  id              String        @id @default(cuid())
  title           String
  subject         String
  content         String
  status          CampaignStatus @default(DRAFT)
  scheduledAt     DateTime?
  sentAt          DateTime?
  recipientCount  Int           @default(0)
  openRate        Float         @default(0)
  clickRate       Float         @default(0)
  tags            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


