# Merge Guidance System for PR #210
param([string]$PRNumber = "210")

Write-Host "üöÄ Merge Guidance for PR #$PRNumber" -ForegroundColor Cyan

function Test-MergeReadiness {
    $pr = gh pr view $PRNumber --json isDraft,mergeable,mergeStateStatus,reviewDecision,reviews,statusCheckRollup | ConvertFrom-Json
    
    $checks = @{
        "Not Draft" = -not $pr.isDraft
        "Mergeable" = $pr.mergeable -eq $true
        "Clean State" = $pr.mergeStateStatus -eq "CLEAN"
        "Review Approved" = $pr.reviewDecision -eq "APPROVED"
        "CI Passing" = ($pr.statusCheckRollup.statusCheckRollup | Where-Object { $_.conclusion -ne "SUCCESS" }).Count -eq 0
    }
    
    Write-Host "`nüîç Merge Readiness Check:" -ForegroundColor Cyan
    foreach ($check in $checks.GetEnumerator()) {
        $status = if ($check.Value) { "‚úÖ" } else { "‚ùå" }
        $color = if ($check.Value) { "Green" } else { "Red" }
        Write-Host "  $status $($check.Key): $($check.Value)" -ForegroundColor $color
    }
    
    return $checks.Values -notcontains $false
}

function New-MergeChecklist {
    return @"
## üöÄ PR #$PRNumber Merge Checklist

### Pre-Merge Verification
- [ ] All CR-GPT comments addressed
- [ ] Code review approved
- [ ] CI checks passing
- [ ] No merge conflicts
- [ ] Tests passing
- [ ] Documentation updated
- [ ] Performance validated
- [ ] Security scan clean

### Merge Strategy
- **Type**: Rebase merge (recommended for clean history)
- **Base**: develop
- **Target**: develop
- **Squash**: No (preserve commit history)

### Post-Merge Actions
- [ ] Update project status to "Done"
- [ ] Close related issue #197
- [ ] Update changelog
- [ ] Deploy to staging
- [ ] Monitor for issues
- [ ] Notify team of completion

### Rollback Plan
- [ ] Identify rollback commit
- [ ] Test rollback procedure
- [ ] Document rollback steps
- [ ] Prepare hotfix if needed

---
*Generated by PR automation workflow*
"@
}

function New-MergeCommand {
    return @"
## üîß Merge Commands

### Option 1: GitHub Web Interface (Recommended)
1. Go to: https://github.com/jschibelli/portfolio-os/pull/$PRNumber
2. Click "Merge pull request"
3. Select "Rebase and merge"
4. Click "Confirm merge"

### Option 2: Command Line
```bash
# Switch to develop branch
git checkout develop
git pull origin develop

# Merge the PR
gh pr merge $PRNumber --rebase --delete-branch

# Push changes
git push origin develop
```

### Option 3: Manual Merge
```bash
# Fetch latest
git fetch origin

# Checkout PR branch
git checkout feature/197-enhanced-toolbar

# Rebase onto develop
git rebase develop

# Switch to develop
git checkout develop

# Merge
git merge feature/197-enhanced-toolbar

# Push
git push origin develop

# Delete branch
git branch -d feature/197-enhanced-toolbar
git push origin --delete feature/197-enhanced-toolbar
```
"@
}

try {
    Write-Host "üìä Analyzing PR #$PRNumber merge readiness..." -ForegroundColor Cyan
    
    # Check merge readiness
    $isReady = Test-MergeReadiness
    
    if ($isReady) {
        Write-Host "`nüéâ PR is ready for merge!" -ForegroundColor Green
        
        # Generate merge checklist
        $checklist = New-MergeChecklist
        Write-Host $checklist -ForegroundColor Cyan
        
        # Generate merge commands
        $commands = New-MergeCommand
        Write-Host $commands -ForegroundColor Yellow
        
        # Update project status to "In review" (ready for final approval)
        Write-Host "`nüìã Updating project status..." -ForegroundColor Blue
        & "scripts\auto-configure-pr.ps1" -PRNumber $PRNumber -Status "In review"
        
    } else {
        Write-Host "`n‚è≥ PR not yet ready for merge" -ForegroundColor Yellow
        Write-Host "Address the issues above before proceeding with merge." -ForegroundColor Yellow
        
        # Keep status as "In progress"
        Write-Host "`nüìã Keeping status as 'In progress'..." -ForegroundColor Blue
        & "scripts\auto-configure-pr.ps1" -PRNumber $PRNumber -Status "In progress"
    }
    
    # Generate final report
    Write-Host "`n=== Merge Guidance Report ===" -ForegroundColor White
    Write-Host "PR: #$PRNumber" -ForegroundColor White
    Write-Host "Merge Ready: $(if ($isReady) { '‚úÖ Yes' } else { '‚ùå No' })" -ForegroundColor White
    Write-Host "Recommended Action: $(if ($isReady) { 'Proceed with merge' } else { 'Address remaining issues' })" -ForegroundColor White
    
} catch {
    Write-Error "Merge guidance failed: $($_.Exception.Message)"
}

Write-Host "`n‚úÖ Merge guidance completed!" -ForegroundColor Green
